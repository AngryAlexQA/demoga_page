name: Python UI Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  ui-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found, installing basic packages"
            pip install pytest selenium webdriver-manager allure-pytest
          fi

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip xvfb libxi6 libgconf-2-4 default-jre

      - name: Install Google Chrome
        run: |
          wget -q -O /tmp/chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt-get install -y /tmp/chrome.deb
          sudo apt --fix-broken install -y
          google-chrome --version

      - name: Install ChromeDriver
        run: |
          pip install webdriver-manager
          python -c "from webdriver_manager.chrome import ChromeDriverManager; ChromeDriverManager().install()"

      - name: Create default pytest.ini if not exists
        run: |
          if [ ! -f pytest.ini ]; then
            cat > pytest.ini << 'EOL'
[pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = -v --tb=short --reruns 1 --reruns-delay 2
junit_family = xunit2
junit_suite_name = UI Tests
EOL
            echo "Created default pytest.ini"
          fi

      - name: Prepare reports directories
        run: |
          mkdir -p allure-results
          mkdir -p allure-report

      - name: Run UI tests with pytest
        env:
          HEADLESS: "true"
          PYTHONUNBUFFERED: "1"
        run: |
          export CHROME_BIN=/usr/bin/google-chrome
          export CHROMEDRIVER_BIN=/usr/local/bin/chromedriver
          echo "Running tests in headless mode"
          pytest -v --junitxml=junit-results.xml --alluredir=allure-results --reruns=1 --reruns-delay=2

      - name: Upload JUnit test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-results
          path: junit-results.xml

      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Install Allure CLI
        if: always()
        run: |
          sudo apt-get install -y default-jre
          wget -q -O allure-2.21.0.tgz https://github.com/allure-framework/allure2/releases/download/2.21.0/allure-2.21.0.tgz
          sudo tar -zxvf allure-2.21.0.tgz -C /opt/
          sudo ln -s /opt/allure-2.21.0/bin/allure /usr/bin/allure
          allure --version

      - name: Generate Allure report
        if: always()
        run: |
          if [ -d allure-results ] && [ "$(ls -A allure-results)" ]; then
            allure generate allure-results -o allure-report --clean
            echo "Allure report generated"
          else
            echo "No Allure results found"
          fi

      - name: Upload Allure report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: junit-results.xml
