name: Python Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate pytest.ini from YAML (if config exists)
        working-directory: ${{ github.workspace }}
        run: |
          if [ -f config/pytest_config.yaml ]; then
            python - <<'PY'
import yaml
from pathlib import Path
cfg_path = Path("config/pytest_config.yaml")
if not cfg_path.exists():
    print("No config/pytest_config.yaml, skipping generation.")
    raise SystemExit(0)
y = yaml.safe_load(cfg_path.read_text())
pytest_cfg = y.get("pytest", {})
lines = ["[pytest]\n"]
for key in ("testpaths", "python_files", "python_classes", "python_functions",
            "junit_family", "junit_suite_name", "junit_logging"):
    if key in pytest_cfg and pytest_cfg[key] is not None:
        lines.append(f"{key} = {pytest_cfg[key]}\n")
if "addopts" in pytest_cfg:
    lines.append("addopts =\n")
    for opt in pytest_cfg["addopts"]:
        lines.append(f"    {opt}\n")
if "alluredir" in pytest_cfg:
    # ensure addopts contains --alluredir too
    lines.append(f"--alluredir={pytest_cfg['alluredir']}\n")
if "reruns" in pytest_cfg:
    lines.append(f"reruns = {pytest_cfg['reruns']}\n")
if "reruns_delay" in pytest_cfg:
    lines.append(f"reruns_delay = {pytest_cfg['reruns_delay']}\n")
if "markers" in pytest_cfg:
    lines.append("\nmarkers =\n")
    for m in pytest_cfg["markers"]:
        name = m.get("name")
        desc = m.get("description","")
        lines.append(f"    {name}: {desc}\n")
if "filterwarnings" in pytest_cfg:
    lines.append("\nfilterwarnings =\n")
    for fw in pytest_cfg["filterwarnings"]:
        lines.append(f"    {fw}\n")
Path("pytest.ini").write_text(''.join(lines))
print('pytest.ini generated')
PY
          else
            echo "No config/pytest_config.yaml found — skipping pytest.ini generation."

      - name: Prepare reports directories
        run: |
          mkdir -p reports/allure-results
          mkdir -p reports/allure-report || true

      - name: Run tests with pytest
        continue-on-error: true
        run: |
          pytest -v --junitxml=test-results.xml
        env:
          # если нужны переменные окружения для браузера/окружения, укажите здесь
          # BROWSER: chrome
          # ENVIRONMENT: test
          PYTHONUNBUFFERED: 1

      - name: Upload JUnit test-results.xml
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-test-results
          path: test-results.xml

      - name: Publish test results (GitHub action for JUnit)
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: test-results.xml

      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: reports/allure-results

      - name: Generate Allure report (optional)
        if: always()
        run: |
          # Установка allurectl для генерации отчетa локально в CI (не обязательна)
          # Попробуйте установить allure-commandline или allurectl; ниже - пример с allurectl
          set -e
          if [ -d reports/allure-results ] && [ "$(ls -A reports/allure-results)" ]; then
            echo "Generating allure report..."
            curl -sSL https://github.com/allure-framework/allure2/releases/download/2.21.0/allure-2.21.0.tgz -o /tmp/allure.tgz || true
            mkdir -p /tmp/allure && tar -xzf /tmp/allure.tgz -C /tmp/allure --strip-components=1 || true
            /tmp/allure/bin/allure generate reports/allure-results -o reports/allure-report || true
            echo "Allure report generated at reports/allure-report"
          else
            echo "No allure results to generate report from."
          fi

      - name: Upload Allure report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: reports/allure-report
